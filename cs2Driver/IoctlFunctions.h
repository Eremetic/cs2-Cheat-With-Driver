#pragma once
#include "Globals.h"

VOID ImageLoadCallback(PUNICODE_STRING FullImageName, HANDLE ProcessId, PIMAGE_INFO ImageInfo);


NTSTATUS Read_Game(IN PIO_STACK_LOCATION ourStack, IN PIRP Irp);

NTSTATUS Game_Info(IN PIO_STACK_LOCATION ourStack, IN PIRP Irp);

NTSTATUS Set_Cursor(IN PIO_STACK_LOCATION ourStack, IN PIRP Irp);

NTSTATUS Set_Display_Protection(IN PIO_STACK_LOCATION ourStack, IN PIRP Irp);

NTSTATUS Kernel_Info(IN PIO_STACK_LOCATION ourStack, IN PIRP Irp);



#define IOCTL_GET_PROCINFO		CTL_CODE(FILE_DEVICE_UNKNOWN, 0x1730, METHOD_BUFFERED, FILE_SPECIAL_ACCESS)

#define IOCTL_READ_VMEM			CTL_CODE(FILE_DEVICE_UNKNOWN, 0x1732, METHOD_BUFFERED, FILE_SPECIAL_ACCESS)

#define IOCTL_SET_CURSOR	    CTL_CODE(FILE_DEVICE_UNKNOWN, 0x1734, METHOD_BUFFERED, FILE_SPECIAL_ACCESS)

#define IOCTL_SET_WNDPROC	    CTL_CODE(FILE_DEVICE_UNKNOWN, 0x1736, METHOD_BUFFERED, FILE_SPECIAL_ACCESS)

#define IOCTL_GET_KRNL_INFO	    CTL_CODE(FILE_DEVICE_UNKNOWN, 0x1738, METHOD_BUFFERED, FILE_SPECIAL_ACCESS)

typedef struct _PROCINFO
{
	DWORD64 clientBaseAddr;
	DWORD64 engineBaseAddr;
}PROCINFO, * PPROCINFO;


typedef struct _READ
{
	DWORD64 readAddr;
	PUCHAR ourBuffer;
	DWORD64 Length;
	ULONG status;
}READ, * PREAD;



typedef struct _CURSOR
{
	POINT cursorPos;
}CURSOR, * PCURSOR;


typedef struct _PROTECT
{
	HWND hWnd;
	UINT dwFlag;
}PROTECT, * PPROTECT;

typedef struct _KERNELINFO
{
	ULONG64 returnBuffer;
	ULONG status;
}KERNELINFO, * PKERNELINFO;